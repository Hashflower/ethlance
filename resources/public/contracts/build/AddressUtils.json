{
  "contractName": "AddressUtils",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"Utility library of inline functions on addresses\"}},\"settings\":{\"compilationTarget\":{\"/home/benzap/projects/ethlance/contracts/utils/AddressUtils.sol\":\"AddressUtils\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/benzap/projects/ethlance/contracts/utils/AddressUtils.sol\":{\"keccak256\":\"0xc7ab6cea0cbdae31fdf8ad945baf85522a518c994cd940d385eca11112ac506f\",\"urls\":[\"bzzr://211c64de600f4f46f82098d7b4a3c2b2c378999402c11b50451c361136ed06f7\"]}},\"version\":1}",
  "bytecode": "0x604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058207a2acb869d2184c778c451e80032b51809420f5e266da3d7107b1d4f38cc266f0029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058207a2acb869d2184c778c451e80032b51809420f5e266da3d7107b1d4f38cc266f0029",
  "sourceMap": "86:922:23:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",
  "deployedSourceMap": "86:922:23:-;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n",
  "sourcePath": "/home/benzap/projects/ethlance/contracts/utils/AddressUtils.sol",
  "ast": {
    "absolutePath": "/home/benzap/projects/ethlance/contracts/utils/AddressUtils.sol",
    "exportedSymbols": {
      "AddressUtils": [
        6022
      ]
    },
    "id": 6023,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6005,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:23"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "Utility library of inline functions on addresses",
        "fullyImplemented": true,
        "id": 6022,
        "linearizedBaseContracts": [
          6022
        ],
        "name": "AddressUtils",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6020,
              "nodeType": "Block",
              "src": "500:505:23",
              "statements": [
                {
                  "assignments": [
                    6013
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6013,
                      "name": "size",
                      "nodeType": "VariableDeclaration",
                      "scope": 6020,
                      "src": "506:12:23",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 6012,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "506:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6014,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "506:12:23"
                },
                {
                  "externalReferences": [
                    {
                      "size": {
                        "declaration": 6013,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "901:4:23",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6007,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "921:4:23",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6015,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    size := extcodesize(addr)\n}",
                  "src": "890:38:23"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 6018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 6016,
                      "name": "size",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6013,
                      "src": "992:4:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 6017,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "999:1:23",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "992:8:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 6011,
                  "id": 6019,
                  "nodeType": "Return",
                  "src": "985:15:23"
                }
              ]
            },
            "documentation": "Returns whether the target address is a contract\n@dev This function will return false if invoked during the constructor of a contract,\n as the code is not actually created until after the constructor finishes.\n@param addr address to check\n@return whether the target address is a contract",
            "id": 6021,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6008,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6007,
                  "name": "addr",
                  "nodeType": "VariableDeclaration",
                  "scope": 6021,
                  "src": "457:12:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6006,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "457:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "456:14:23"
            },
            "returnParameters": {
              "id": 6011,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6010,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6021,
                  "src": "494:4:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6009,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "494:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "493:6:23"
            },
            "scope": 6022,
            "src": "437:568:23",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 6023,
        "src": "86:922:23"
      }
    ],
    "src": "0:1009:23"
  },
  "legacyAST": {
    "absolutePath": "/home/benzap/projects/ethlance/contracts/utils/AddressUtils.sol",
    "exportedSymbols": {
      "AddressUtils": [
        6022
      ]
    },
    "id": 6023,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6005,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:23"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "Utility library of inline functions on addresses",
        "fullyImplemented": true,
        "id": 6022,
        "linearizedBaseContracts": [
          6022
        ],
        "name": "AddressUtils",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6020,
              "nodeType": "Block",
              "src": "500:505:23",
              "statements": [
                {
                  "assignments": [
                    6013
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 6013,
                      "name": "size",
                      "nodeType": "VariableDeclaration",
                      "scope": 6020,
                      "src": "506:12:23",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 6012,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "506:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 6014,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "506:12:23"
                },
                {
                  "externalReferences": [
                    {
                      "size": {
                        "declaration": 6013,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "901:4:23",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 6007,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "921:4:23",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 6015,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    size := extcodesize(addr)\n}",
                  "src": "890:38:23"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 6018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 6016,
                      "name": "size",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6013,
                      "src": "992:4:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 6017,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "999:1:23",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "992:8:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 6011,
                  "id": 6019,
                  "nodeType": "Return",
                  "src": "985:15:23"
                }
              ]
            },
            "documentation": "Returns whether the target address is a contract\n@dev This function will return false if invoked during the constructor of a contract,\n as the code is not actually created until after the constructor finishes.\n@param addr address to check\n@return whether the target address is a contract",
            "id": 6021,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6008,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6007,
                  "name": "addr",
                  "nodeType": "VariableDeclaration",
                  "scope": 6021,
                  "src": "457:12:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6006,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "457:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "456:14:23"
            },
            "returnParameters": {
              "id": 6011,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6010,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6021,
                  "src": "494:4:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6009,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "494:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "493:6:23"
            },
            "scope": 6022,
            "src": "437:568:23",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 6023,
        "src": "86:922:23"
      }
    ],
    "src": "0:1009:23"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Linux.g++"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-05-15T03:25:42.176Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {},
    "notice": "Utility library of inline functions on addresses"
  }
}