{
  "contractName": "MutableForwarder",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "authority_",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "LogSetAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LogSetOwner",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"For TCR Registry contracts (Registry.sol, ParamChangeRegistry.sol) we use mutable forwarders instead of using contracts directly. This is for better upgradeability. Since registry contracts fire all events related to registry entries, we want to be able to access whole history of events always on the same address. Which would be address of a MutableForwarder. When a registry contract is replaced with updated one, mutable forwarder just replaces target and all events stay still accessible on the same address.\",\"methods\":{\"setTarget(address)\":{\"details\":\"Replaces targer forwarder contract is pointing to Only authenticated user can replace target\",\"params\":{\"_target\":\"New target to proxy into\"}}},\"title\":\"Forwarder proxy contract with editable target\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/benzap/projects/ethlance/contracts/proxy/MutableForwarder.sol\":\"MutableForwarder\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/benzap/projects/ethlance/contracts/DSAuth.sol\":{\"keccak256\":\"0x4fb616b2ed1af57b8b6f057606348768df991fd2ca4d21ead5d962929f242dec\",\"urls\":[\"bzzr://4ef007276a9e29a3f961a43a62499843ffb642bda149b964dcde148c167b00ba\"]},\"/home/benzap/projects/ethlance/contracts/proxy/DelegateProxy.sol\":{\"keccak256\":\"0x1a0a858c7618d51c714d1bf9e86ace7c85305c7dbad48ca5b1402de31b640d1b\",\"urls\":[\"bzzr://d301fa78bb3ca5eedbc853484710c286565154823c8831046eb29ca66694c4c6\"]},\"/home/benzap/projects/ethlance/contracts/proxy/MutableForwarder.sol\":{\"keccak256\":\"0x8d5423ceddcbb61cd07a627cb1205a76c15eda67ab78e2c9803574a9097f2ef9\",\"urls\":[\"bzzr://b03c3eaf18c7513dda933b1f5c456e1b70c21a174dec01d03325c22d1cfd47da\"]}},\"version\":1}",
  "bytecode": "0x608060405273beefbeefbeefbeefbeefbeefbeefbeefbeefbeef600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2610979806100ec6000396000f3fe6080604052600436106100555760003560e01c806313af4035146100c8578063776d1a01146101195780637a9e5e4b1461016a5780638da5cb5b146101bb578063bf7e214f14610212578063d4b8399214610269575b6100c6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102c0565b005b3480156100d457600080fd5b50610117600480360360208110156100eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102fc565b005b34801561012557600080fd5b506101686004803603602081101561013c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610445565b005b34801561017657600080fd5b506101b96004803603602081101561018d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610529565b005b3480156101c757600080fd5b506101d0610670565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021e57600080fd5b50610227610696565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027557600080fd5b5061027e6106bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102c9826106e1565b6102d257600080fd5b600080825160208401856127105a03f43d604051816000823e82600081146102f8578282f35b8282fd5b61032a336000357fffffffff00000000000000000000000000000000000000000000000000000000166106f4565b61039c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564204163636573730000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b610473336000357fffffffff00000000000000000000000000000000000000000000000000000000166106f4565b6104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564204163636573730000000000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610557336000357fffffffff00000000000000000000000000000000000000000000000000000000166106f4565b6105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564204163636573730000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080823b905060008111915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107335760019050610947565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107925760019050610947565b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107f15760009050610947565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561090957600080fd5b505afa15801561091d573d6000803e3d6000fd5b505050506040513d602081101561093357600080fd5b810190808051906020019092919050505090505b9291505056fea165627a7a72305820acbe25f7a8b02435acbe1c914eb542fbd2c73f8e06f4a827ca6bdc8bd2d146980029",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c806313af4035146100c8578063776d1a01146101195780637a9e5e4b1461016a5780638da5cb5b146101bb578063bf7e214f14610212578063d4b8399214610269575b6100c6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102c0565b005b3480156100d457600080fd5b50610117600480360360208110156100eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102fc565b005b34801561012557600080fd5b506101686004803603602081101561013c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610445565b005b34801561017657600080fd5b506101b96004803603602081101561018d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610529565b005b3480156101c757600080fd5b506101d0610670565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021e57600080fd5b50610227610696565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027557600080fd5b5061027e6106bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102c9826106e1565b6102d257600080fd5b600080825160208401856127105a03f43d604051816000823e82600081146102f8578282f35b8282fd5b61032a336000357fffffffff00000000000000000000000000000000000000000000000000000000166106f4565b61039c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564204163636573730000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b610473336000357fffffffff00000000000000000000000000000000000000000000000000000000166106f4565b6104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564204163636573730000000000000000000000000081525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610557336000357fffffffff00000000000000000000000000000000000000000000000000000000166106f4565b6105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f556e617574686f72697a6564204163636573730000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080823b905060008111915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107335760019050610947565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107925760019050610947565b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107f15760009050610947565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561090957600080fd5b505afa15801561091d573d6000803e3d6000fd5b505050506040513d602081101561093357600080fd5b810190808051906020019092919050505090505b9291505056fea165627a7a72305820acbe25f7a8b02435acbe1c914eb542fbd2c73f8e06f4a827ca6bdc8bd2d146980029",
  "sourceMap": "689:477:19:-;;;769:42;745:66;;;;;;;;;;;;;;;;;;;;1527:10:0;1519:5;;:18;;;;;;;;;;;;;;;;;;1560:10;1548:23;;;;;;;;;;;;689:477:19;;;;;;",
  "deployedSourceMap": "689:477:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1128:30;1141:6;;;;;;;;;;;1149:8;;1128:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1128:30:19;;;;;;:12;:30::i;:::-;689:477;1604:110:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1604:110:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1604:110:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;1015:75:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1015:75:19;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1015:75:19;;;;;;;;;;;;;;;;;;;:::i;:::-;;1718:147:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1718:147:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1718:147:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;1448:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1448:26:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1414:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1414:30:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;745:66:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;745:66:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;302:582:16;385:16;396:4;385:10;:16::i;:::-;377:25;;;;;;518:1;515;503:9;497:16;490:4;479:9;475:20;469:4;461:5;456:3;452:15;439:81;541:14;582:4;576:11;619:4;616:1;611:3;596:28;806:6;818:1;813:26;;;;868:4;863:3;855:18;813:26;833:4;828:3;821:17;1604:110:0;1983:33;1996:10;2008:7;;;;1983:12;:33::i;:::-;1975:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1674:6;1666:5;;:14;;;;;;;;;;;;;;;;;;1703:5;;;;;;;;;;;1691:18;;;;;;;;;;;;1604:110;:::o;1015:75:19:-;1983:33:0;1996:10;2008:7;;;;1983:12;:33::i;:::-;1975:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1078:7:19;1069:6;;:16;;;;;;;;;;;;;;;;;;1015:75;:::o;1718:147:0:-;1983:33;1996:10;2008:7;;;;1983:12;:33::i;:::-;1975:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1804:10;1792:9;;:22;;;;;;;;;;;;;;;;;;1849:9;;;;;;;;;;;1825:35;;;;;;;;;;;;1718:147;:::o;1448:26::-;;;;;;;;;;;;;:::o;1414:30::-;;;;;;;;;;;;;:::o;745:66:19:-;;;;;;;;;;;;;:::o;888:154:16:-;948:4;960:12;1008:7;996:20;988:28;;1036:1;1029:4;:8;1022:15;;;888:154;;;:::o;2464:330:0:-;2538:4;2571;2556:20;;:3;:20;;;2552:238;;;2593:4;2586:11;;;;2552:238;2621:5;;;;;;;;;;;2614:12;;:3;:12;;;2610:180;;;2643:4;2636:11;;;;2610:180;2689:1;2664:27;;:9;;;;;;;;;;;:27;;;2660:130;;;2708:5;2701:12;;;;2660:130;2741:9;;;;;;;;;;;:17;;;2759:3;2772:4;2779:3;2741:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2741:42:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2741:42:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2741:42:0;;;;;;;;;;;;;;;;2734:49;;2464:330;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"../proxy/DelegateProxy.sol\";\nimport \"../DSAuth.sol\";\n\n/**\n * @title Forwarder proxy contract with editable target\n *\n * @dev For TCR Registry contracts (Registry.sol, ParamChangeRegistry.sol) we use mutable forwarders instead of using\n * contracts directly. This is for better upgradeability. Since registry contracts fire all events related to registry\n * entries, we want to be able to access whole history of events always on the same address. Which would be address of\n * a MutableForwarder. When a registry contract is replaced with updated one, mutable forwarder just replaces target\n * and all events stay still accessible on the same address.\n */\n\ncontract MutableForwarder is DelegateProxy, DSAuth {\n\n  address public target = 0xBEeFbeefbEefbeEFbeEfbEEfBEeFbeEfBeEfBeef; // checksumed to silence warning\n\n  /**\n   * @dev Replaces targer forwarder contract is pointing to\n   * Only authenticated user can replace target\n\n   * @param _target New target to proxy into\n   */\n  function setTarget(address _target) public auth {\n    target = _target;\n  }\n\n  function() external payable {\n    delegatedFwd(target, msg.data);\n  }\n\n}\n",
  "sourcePath": "/home/benzap/projects/ethlance/contracts/proxy/MutableForwarder.sol",
  "ast": {
    "absolutePath": "/home/benzap/projects/ethlance/contracts/proxy/MutableForwarder.sol",
    "exportedSymbols": {
      "MutableForwarder": [
        5896
      ]
    },
    "id": 5897,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5864,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:19"
      },
      {
        "absolutePath": "/home/benzap/projects/ethlance/contracts/proxy/DelegateProxy.sol",
        "file": "../proxy/DelegateProxy.sol",
        "id": 5865,
        "nodeType": "ImportDirective",
        "scope": 5897,
        "sourceUnit": 5825,
        "src": "25:36:19",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/benzap/projects/ethlance/contracts/DSAuth.sol",
        "file": "../DSAuth.sol",
        "id": 5866,
        "nodeType": "ImportDirective",
        "scope": 5897,
        "sourceUnit": 137,
        "src": "62:23:19",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5867,
              "name": "DelegateProxy",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5824,
              "src": "718:13:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DelegateProxy_$5824",
                "typeString": "contract DelegateProxy"
              }
            },
            "id": 5868,
            "nodeType": "InheritanceSpecifier",
            "src": "718:13:19"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5869,
              "name": "DSAuth",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 136,
              "src": "733:6:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DSAuth_$136",
                "typeString": "contract DSAuth"
              }
            },
            "id": 5870,
            "nodeType": "InheritanceSpecifier",
            "src": "733:6:19"
          }
        ],
        "contractDependencies": [
          136,
          22,
          5824
        ],
        "contractKind": "contract",
        "documentation": "@title Forwarder proxy contract with editable target\n * @dev For TCR Registry contracts (Registry.sol, ParamChangeRegistry.sol) we use mutable forwarders instead of using\ncontracts directly. This is for better upgradeability. Since registry contracts fire all events related to registry\nentries, we want to be able to access whole history of events always on the same address. Which would be address of\na MutableForwarder. When a registry contract is replaced with updated one, mutable forwarder just replaces target\nand all events stay still accessible on the same address.",
        "fullyImplemented": true,
        "id": 5896,
        "linearizedBaseContracts": [
          5896,
          136,
          22,
          5824
        ],
        "name": "MutableForwarder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 5873,
            "name": "target",
            "nodeType": "VariableDeclaration",
            "scope": 5896,
            "src": "745:66:19",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 5871,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "745:7:19",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "307842456546626565666245656662654546626545666245456642456546626545664265456642656566",
              "id": 5872,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "769:42:19",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              },
              "value": "0xBEeFbeefbEefbeEFbeEfbEEfBEeFbeEfBeEfBeef"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 5884,
              "nodeType": "Block",
              "src": "1063:27:19",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 5882,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 5880,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5873,
                      "src": "1069:6:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 5881,
                      "name": "_target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5875,
                      "src": "1078:7:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1069:16:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 5883,
                  "nodeType": "ExpressionStatement",
                  "src": "1069:16:19"
                }
              ]
            },
            "documentation": "@dev Replaces targer forwarder contract is pointing to\nOnly authenticated user can replace target\n@param _target New target to proxy into",
            "id": 5885,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 5878,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 5877,
                  "name": "auth",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 90,
                  "src": "1058:4:19",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1058:4:19"
              }
            ],
            "name": "setTarget",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5876,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5875,
                  "name": "_target",
                  "nodeType": "VariableDeclaration",
                  "scope": 5885,
                  "src": "1034:15:19",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5874,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1034:7:19",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1033:17:19"
            },
            "returnParameters": {
              "id": 5879,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1063:0:19"
            },
            "scope": 5896,
            "src": "1015:75:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5894,
              "nodeType": "Block",
              "src": "1122:41:19",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5889,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5873,
                        "src": "1141:6:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 5890,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6037,
                          "src": "1149:3:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 5891,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1149:8:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 5888,
                      "name": "delegatedFwd",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5807,
                      "src": "1128:12:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 5892,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1128:30:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5893,
                  "nodeType": "ExpressionStatement",
                  "src": "1128:30:19"
                }
              ]
            },
            "documentation": null,
            "id": 5895,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5886,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1102:2:19"
            },
            "returnParameters": {
              "id": 5887,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1122:0:19"
            },
            "scope": 5896,
            "src": "1094:69:19",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 5897,
        "src": "689:477:19"
      }
    ],
    "src": "0:1167:19"
  },
  "legacyAST": {
    "absolutePath": "/home/benzap/projects/ethlance/contracts/proxy/MutableForwarder.sol",
    "exportedSymbols": {
      "MutableForwarder": [
        5896
      ]
    },
    "id": 5897,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5864,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:19"
      },
      {
        "absolutePath": "/home/benzap/projects/ethlance/contracts/proxy/DelegateProxy.sol",
        "file": "../proxy/DelegateProxy.sol",
        "id": 5865,
        "nodeType": "ImportDirective",
        "scope": 5897,
        "sourceUnit": 5825,
        "src": "25:36:19",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/benzap/projects/ethlance/contracts/DSAuth.sol",
        "file": "../DSAuth.sol",
        "id": 5866,
        "nodeType": "ImportDirective",
        "scope": 5897,
        "sourceUnit": 137,
        "src": "62:23:19",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5867,
              "name": "DelegateProxy",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5824,
              "src": "718:13:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DelegateProxy_$5824",
                "typeString": "contract DelegateProxy"
              }
            },
            "id": 5868,
            "nodeType": "InheritanceSpecifier",
            "src": "718:13:19"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5869,
              "name": "DSAuth",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 136,
              "src": "733:6:19",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DSAuth_$136",
                "typeString": "contract DSAuth"
              }
            },
            "id": 5870,
            "nodeType": "InheritanceSpecifier",
            "src": "733:6:19"
          }
        ],
        "contractDependencies": [
          136,
          22,
          5824
        ],
        "contractKind": "contract",
        "documentation": "@title Forwarder proxy contract with editable target\n * @dev For TCR Registry contracts (Registry.sol, ParamChangeRegistry.sol) we use mutable forwarders instead of using\ncontracts directly. This is for better upgradeability. Since registry contracts fire all events related to registry\nentries, we want to be able to access whole history of events always on the same address. Which would be address of\na MutableForwarder. When a registry contract is replaced with updated one, mutable forwarder just replaces target\nand all events stay still accessible on the same address.",
        "fullyImplemented": true,
        "id": 5896,
        "linearizedBaseContracts": [
          5896,
          136,
          22,
          5824
        ],
        "name": "MutableForwarder",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 5873,
            "name": "target",
            "nodeType": "VariableDeclaration",
            "scope": 5896,
            "src": "745:66:19",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 5871,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "745:7:19",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "307842456546626565666245656662654546626545666245456642456546626545664265456642656566",
              "id": 5872,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "769:42:19",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              },
              "value": "0xBEeFbeefbEefbeEFbeEfbEEfBEeFbeEfBeEfBeef"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 5884,
              "nodeType": "Block",
              "src": "1063:27:19",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 5882,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 5880,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5873,
                      "src": "1069:6:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 5881,
                      "name": "_target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5875,
                      "src": "1078:7:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1069:16:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 5883,
                  "nodeType": "ExpressionStatement",
                  "src": "1069:16:19"
                }
              ]
            },
            "documentation": "@dev Replaces targer forwarder contract is pointing to\nOnly authenticated user can replace target\n@param _target New target to proxy into",
            "id": 5885,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 5878,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 5877,
                  "name": "auth",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 90,
                  "src": "1058:4:19",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1058:4:19"
              }
            ],
            "name": "setTarget",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5876,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5875,
                  "name": "_target",
                  "nodeType": "VariableDeclaration",
                  "scope": 5885,
                  "src": "1034:15:19",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5874,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1034:7:19",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1033:17:19"
            },
            "returnParameters": {
              "id": 5879,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1063:0:19"
            },
            "scope": 5896,
            "src": "1015:75:19",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5894,
              "nodeType": "Block",
              "src": "1122:41:19",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5889,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5873,
                        "src": "1141:6:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 5890,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6037,
                          "src": "1149:3:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 5891,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1149:8:19",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 5888,
                      "name": "delegatedFwd",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5807,
                      "src": "1128:12:19",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 5892,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1128:30:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5893,
                  "nodeType": "ExpressionStatement",
                  "src": "1128:30:19"
                }
              ]
            },
            "documentation": null,
            "id": 5895,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5886,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1102:2:19"
            },
            "returnParameters": {
              "id": 5887,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1122:0:19"
            },
            "scope": 5896,
            "src": "1094:69:19",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 5897,
        "src": "689:477:19"
      }
    ],
    "src": "0:1167:19"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Linux.g++"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-05-15T03:25:42.174Z",
  "devdoc": {
    "details": "For TCR Registry contracts (Registry.sol, ParamChangeRegistry.sol) we use mutable forwarders instead of using contracts directly. This is for better upgradeability. Since registry contracts fire all events related to registry entries, we want to be able to access whole history of events always on the same address. Which would be address of a MutableForwarder. When a registry contract is replaced with updated one, mutable forwarder just replaces target and all events stay still accessible on the same address.",
    "methods": {
      "setTarget(address)": {
        "details": "Replaces targer forwarder contract is pointing to Only authenticated user can replace target",
        "params": {
          "_target": "New target to proxy into"
        }
      }
    },
    "title": "Forwarder proxy contract with editable target"
  },
  "userdoc": {
    "methods": {}
  }
}